/**
 * This class is generated by jOOQ
 */
package JooqORM.tables.records;


import JooqORM.tables.Stock;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StockRecord extends UpdatableRecordImpl<StockRecord> implements Record8<String, Double, Timestamp, Timestamp, Double, Integer, Double, Timestamp> {

    private static final long serialVersionUID = -1580193752;

    /**
     * Setter for <code>EarningManagerDB.stock.symbol</code>.
     */
    public void setSymbol(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>EarningManagerDB.stock.symbol</code>.
     */
    public String getSymbol() {
        return (String) get(0);
    }

    /**
     * Setter for <code>EarningManagerDB.stock.current_price</code>.
     */
    public void setCurrentPrice(Double value) {
        set(1, value);
    }

    /**
     * Getter for <code>EarningManagerDB.stock.current_price</code>.
     */
    public Double getCurrentPrice() {
        return (Double) get(1);
    }

    /**
     * Setter for <code>EarningManagerDB.stock.current_price_latest_update_time</code>.
     */
    public void setCurrentPriceLatestUpdateTime(Timestamp value) {
        set(2, value);
    }

    /**
     * Getter for <code>EarningManagerDB.stock.current_price_latest_update_time</code>.
     */
    public Timestamp getCurrentPriceLatestUpdateTime() {
        return (Timestamp) get(2);
    }

    /**
     * Setter for <code>EarningManagerDB.stock.report_date</code>.
     */
    public void setReportDate(Timestamp value) {
        set(3, value);
    }

    /**
     * Getter for <code>EarningManagerDB.stock.report_date</code>.
     */
    public Timestamp getReportDate() {
        return (Timestamp) get(3);
    }

    /**
     * Setter for <code>EarningManagerDB.stock.shared_average_cost</code>.
     */
    public void setSharedAverageCost(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>EarningManagerDB.stock.shared_average_cost</code>.
     */
    public Double getSharedAverageCost() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>EarningManagerDB.stock.shares</code>.
     */
    public void setShares(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>EarningManagerDB.stock.shares</code>.
     */
    public Integer getShares() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>EarningManagerDB.stock.target_price</code>.
     */
    public void setTargetPrice(Double value) {
        set(6, value);
    }

    /**
     * Getter for <code>EarningManagerDB.stock.target_price</code>.
     */
    public Double getTargetPrice() {
        return (Double) get(6);
    }

    /**
     * Setter for <code>EarningManagerDB.stock.timestamp</code>.
     */
    public void setTimestamp(Timestamp value) {
        set(7, value);
    }

    /**
     * Getter for <code>EarningManagerDB.stock.timestamp</code>.
     */
    public Timestamp getTimestamp() {
        return (Timestamp) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row8<String, Double, Timestamp, Timestamp, Double, Integer, Double, Timestamp> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row8<String, Double, Timestamp, Timestamp, Double, Integer, Double, Timestamp> valuesRow() {
        return (Row8) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Stock.STOCK.SYMBOL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field2() {
        return Stock.STOCK.CURRENT_PRICE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field3() {
        return Stock.STOCK.CURRENT_PRICE_LATEST_UPDATE_TIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field4() {
        return Stock.STOCK.REPORT_DATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field5() {
        return Stock.STOCK.SHARED_AVERAGE_COST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field6() {
        return Stock.STOCK.SHARES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field7() {
        return Stock.STOCK.TARGET_PRICE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field8() {
        return Stock.STOCK.TIMESTAMP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getSymbol();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value2() {
        return getCurrentPrice();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value3() {
        return getCurrentPriceLatestUpdateTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value4() {
        return getReportDate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value5() {
        return getSharedAverageCost();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value6() {
        return getShares();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value7() {
        return getTargetPrice();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value8() {
        return getTimestamp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StockRecord value1(String value) {
        setSymbol(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StockRecord value2(Double value) {
        setCurrentPrice(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StockRecord value3(Timestamp value) {
        setCurrentPriceLatestUpdateTime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StockRecord value4(Timestamp value) {
        setReportDate(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StockRecord value5(Double value) {
        setSharedAverageCost(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StockRecord value6(Integer value) {
        setShares(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StockRecord value7(Double value) {
        setTargetPrice(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StockRecord value8(Timestamp value) {
        setTimestamp(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StockRecord values(String value1, Double value2, Timestamp value3, Timestamp value4, Double value5, Integer value6, Double value7, Timestamp value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StockRecord
     */
    public StockRecord() {
        super(Stock.STOCK);
    }

    /**
     * Create a detached, initialised StockRecord
     */
    public StockRecord(String symbol, Double currentPrice, Timestamp currentPriceLatestUpdateTime, Timestamp reportDate, Double sharedAverageCost, Integer shares, Double targetPrice, Timestamp timestamp) {
        super(Stock.STOCK);

        set(0, symbol);
        set(1, currentPrice);
        set(2, currentPriceLatestUpdateTime);
        set(3, reportDate);
        set(4, sharedAverageCost);
        set(5, shares);
        set(6, targetPrice);
        set(7, timestamp);
    }
}
